name: 'messenger CI/CD'

on:
  pull_request:
    types:
      - closed

jobs:
  build:
    # Если PR был подтверждён (ветки смёржены)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      MACHINE_HOST: ${{ secrets.VM_HOST }}
    
    steps:
      # Клонирование репозитория
      - 
        name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
      
      # Подготовка докера (установка)
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Настройка переменных окружения
      - 
        name: Set Environment Variables
        run: |
            export DB_HOST=$DB_HOST
            export DB_NAME=$DB_NAME
            export DB_USER=$DB_USER
            export DB_PASSWORD=$DB_PASSWORD
            export DB_PORT=$DB_PORT
            export MACHINE_HOST=$MACHINE_HOST
          
      - 
        name: Build
        run: |
          docker compose build

      # Сохранение артефактов сборки
      - 
        name: Save Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .  # Путь к результатам сборки

  test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      # Загрузка артефактов сборки
      - 
        name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - 
        name: Testing
        run: |
          echo "running tests"
          sleep 5

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - 
        name: Deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.VM_PORT }}
          envs: DB_HOST, DB_NAME, DB_USER, DB_PASSWORD, DB_PORT, MACHINE_HOST
          script: |
            if [ -z "$DB_HOST" ]; then
              echo "DB_HOST is not set"
              exit 1
            fi
            cd ~/messenger
            sudo -E docker compose down
            git checkout main
            git pull origin main
            sudo -E docker compose build
            sudo -E docker compose up -d
